var searchIndex = JSON.parse('{\
"lib_rust_primes":{"doc":"Not too terrible Prime Calculator","t":[6,8,8,8,3,6,6,6,8,6,10,10,10,10,10,0,10,10,13,6,8,8,13,13,13,8,3,6,6,6,4,3,3,3,3,8,6,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,10,5,11,11,11,11,5,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,6,8,8,8,3,6,6,6,8,6,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,11,11,11,11,10,10,11,11,11,11,5,5,0,5,5,5,5],"n":["AtomicSieve","CanBeTrue","CanSieve","IsAtomicSieve","IterAtomicSievePrimes","NonAtomicSieve","OwnedSieve","Sieve","SievedArray","ViewSieve","collect_into_primes","count_primes","is_prime_index","is_true","iter_lowest_primes","prelude","sieve","to_non_atomic","ATKIN","AtomicSieve","CanBeTrue","CanSieve","ERATOSTHENES","ERATOSTHENES_ATOMIC","ERATOSTHENES_THREADED","IsAtomicSieve","IterAtomicSievePrimes","NonAtomicSieve","OwnedSieve","Sieve","SieveMethod","SieveOfAtkin","SieveOfEratosthenes","SieveOfEratosthenesAtomic","SieveOfEratosthenesThreaded","SievedArray","ViewSieve","arguments","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","collect_into_primes","constructs","count_primes","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","extract","extract","extract","fmt","formulas","from","from","from","from","from","hash","init","init","init","init","init","into","into","into","into","into","into_py","is_prime_index","is_true","items_iter","iter","iter_lowest_primes","list_n_primes","new","new","new","new","nth_prime","sieve","sieve","sieve","sieve","sieve","sieve","to_non_atomic","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_object_raw","upper_bound_of_nth_prime","AtomicSieve","CanBeTrue","CanSieve","IsAtomicSieve","IterAtomicSievePrimes","NonAtomicSieve","OwnedSieve","Sieve","SievedArray","ViewSieve","borrow","borrow_mut","collect_into_primes","collect_into_primes","count_primes","count_primes","count_primes","count_primes","count_primes","count_primes","deref","deref_mut","drop","from","init","into","into_iter","is_prime","is_prime","is_prime","is_prime","is_prime_index","is_prime_index","is_true","iter_lowest_primes","iter_lowest_primes","list_primes","list_primes","list_primes","list_primes","new","next","sieve","to_non_atomic","to_non_atomic","try_from","try_into","type_id","list_n_primes","nth_prime","upper_bound","upper_bound_of_nth_prime","list_n_primes","nth_prime","upper_bound_of_nth_prime"],"q":["lib_rust_primes","","","","","","","","","","","","","","","","","","lib_rust_primes::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lib_rust_primes::prelude::constructs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lib_rust_primes::prelude::formulas","","","","lib_rust_primes::prelude::formulas::upper_bound","",""],"d":["","Trait shared by <code>bool</code> and <code>AtomicBool</code> for global …","A trait for <code>SieveMethod</code> enum as well as its variants, …","Special trait for AtomicSieves, which","An <code>Iterator</code> struct to yield the lowest prime currently …","","","","Trait allowing <code>Array</code>s of <code>bool</code> can be collected into …","","","","","","","A module containing all the exports of this library.","","","Modern method, but less well optimised by the compiler; …","","Trait shared by <code>bool</code> and <code>AtomicBool</code> for global …","A trait for <code>SieveMethod</code> enum as well as its variants, …","The ancient method. Using the :meth:…","Same method as :attr:<code>ERATOSTHENES</code>, but conducted on an …","<em>Experimental</em>. An attempt to introduce threading into :attr:…","Special trait for AtomicSieves, which","An <code>Iterator</code> struct to yield the lowest prime currently …","","","","Methods of sieving.","Returns an <code>Array</code> of <code>bool</code> that indicates whether its index …","Returns an <code>Array</code> of <code>bool</code> that indicates whether its index …","Atomic SieveOfEratosthenes supporting threaded operations.","Experiment to make <code>SieveOfEratosthenes</code> threaded using …","Trait allowing <code>Array</code>s of <code>bool</code> can be collected into …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","List the first n number of primes.","","Builder method for this class.","Builder method for this class.","Builder method for this class.","Return the nth prime.","","","","","","","","","","","","","","","","","","","","","","","","","Find the mathematical upper bound of the nth prime.","","Trait shared by <code>bool</code> and <code>AtomicBool</code> for global …","A trait for <code>SieveMethod</code> enum as well as its variants, …","Special trait for AtomicSieves, which","An <code>Iterator</code> struct to yield the lowest prime currently …","","","","Trait allowing <code>Array</code>s of <code>bool</code> can be collected into …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","List the first n number of primes.","Return the nth prime.","","Find the mathematical upper bound of the nth prime.","List the first n number of primes.","Return the nth prime.","Find the mathematical upper bound of the nth prime."],"i":[0,0,0,0,0,0,0,0,0,0,27,27,27,28,29,0,30,29,11,0,0,0,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,11,20,21,22,23,11,20,21,22,23,11,11,11,27,0,27,11,20,21,22,23,11,20,21,22,23,11,20,21,22,23,11,11,11,11,11,0,20,21,22,23,11,11,20,21,22,23,11,20,21,22,23,11,11,27,28,11,11,29,0,20,21,22,23,0,30,20,21,22,23,11,29,11,20,21,22,23,11,20,21,22,23,11,20,21,22,23,11,11,0,0,0,0,0,0,0,0,0,0,0,5,5,27,6,27,30,30,30,30,6,5,5,5,5,5,5,5,30,30,30,30,27,6,28,29,24,30,30,30,30,5,5,30,29,24,5,5,5,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],[[3,[1]]]],[[],1],[[],4],[[],4],[[],5],0,[1,6],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[8,[[10,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,11],[[]],[[[2,[1]]],[[3,[1]]]],0,[[],1],[[],11],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[9,[[14,[13]]]],[9,[[15,[11]]]],[9,[[15,[11]]]],[[11,16],17],0,[[]],[[]],[[]],[[]],[[]],[11],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[11,8],18],[[],4],[[],4],[[],19],0,[[],5],[[11,1],[[3,[1]]]],[[],20],[[],21],[[],22],[[],23],[[11,1],[[2,[1]]]],[1,6],[[20,1],24],[[21,1],7],[[22,1],7],[[23,1],7],[[11,1],[[6,[4]]]],[[],7],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],25],[[],25],[[],25],[[],25],[[],25],[8,26],[1,1],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[2,[1]]],[[3,[1]]]],[[6,[2,[1]]],[[3,[1]]]],[[],1],[1,1],[1,1],[1,1],[1,1],[6,1],[12],[12],[12],[[]],[[],12],[[]],[[]],[1,4],[1,4],[1,4],[1,4],[[],4],[[],4],[[],4],[[],5],[24,5],[[1,[2,[1]]],[[3,[1]]]],[[1,[2,[1]]],[[3,[1]]]],[[1,[2,[1]]],[[3,[1]]]],[[1,[2,[1]]],[[3,[1]]]],[24,5],[5,2],[1,6],[[],7],[24,7],[[],14],[[],14],[[],25],[[11,1],[[3,[1]]]],[[11,1],[[2,[1]]]],0,[1,1],[[11,1],[[3,[1]]]],[[11,1],[[2,[1]]]],[1,1]],"p":[[15,"u64"],[4,"Option"],[3,"Vec"],[15,"bool"],[3,"IterAtomicSievePrimes"],[6,"OwnedSieve"],[6,"NonAtomicSieve"],[3,"Python"],[3,"PyAny"],[3,"Py"],[4,"SieveMethod"],[15,"usize"],[3,"PyErr"],[4,"Result"],[6,"PyResult"],[3,"Formatter"],[6,"Result"],[6,"PyObject"],[3,"PyClassItemsIter"],[3,"SieveOfEratosthenesAtomic"],[3,"SieveOfEratosthenes"],[3,"SieveOfAtkin"],[3,"SieveOfEratosthenesThreaded"],[6,"AtomicSieve"],[3,"TypeId"],[3,"PyTypeObject"],[8,"SievedArray"],[8,"CanBeTrue"],[8,"IsAtomicSieve"],[8,"CanSieve"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
